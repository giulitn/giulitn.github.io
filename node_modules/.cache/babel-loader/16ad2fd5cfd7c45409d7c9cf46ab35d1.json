{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giuliana/Desktop/Curso React/curso-react-coderhouse/src/Context/cartContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nexport const CartContext = /*#__PURE__*/React.createContext([]);\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n\n  const [cartProducts, setCartProducts] = useState([]);\n\n  const totalCost = () => {\n    const cost = cartProducts.reduce((sum, product) => sum + product.price * product.count, 0); // return convertToMoney(cost) TO DO\n\n    return cost;\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: [cartProducts, setCartProducts],\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"U6A359Ie+N1Isul8547a+XNDaDk=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/giuliana/Desktop/Curso React/curso-react-coderhouse/src/Context/cartContext.js"],"names":["React","useState","CartContext","createContext","CartProvider","children","cartProducts","setCartProducts","totalCost","cost","reduce","sum","product","price","count"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB,EAApB,CAApB;AAEP,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC1C,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMO,SAAS,GAAG,MAAM;AACpB,UAAMC,IAAI,GAAGH,YAAY,CAACI,MAAb,CACX,CAACC,GAAD,EAAMC,OAAN,KAAkBD,GAAG,GAAGC,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACE,KADrC,EAEX,CAFW,CAAb,CADoB,CAKpB;;AACA,WAAOL,IAAP;AACD,GAPH;;AASA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE,CAACH,YAAD,EAAeC,eAAf,CAA7B;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAjBM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import React, { useState } from 'react';\n\nexport const CartContext = React.createContext([]);\n\nexport const CartProvider = ({ children }) => {\n    const [cartProducts, setCartProducts] = useState([]);\n\n    const totalCost = () => {\n        const cost = cartProducts.reduce(\n          (sum, product) => sum + product.price * product.count,\n          0\n        )\n        // return convertToMoney(cost) TO DO\n        return cost\n      }\n\n    return (\n        <CartContext.Provider value={[cartProducts, setCartProducts]}>\n            {children}\n        </CartContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}