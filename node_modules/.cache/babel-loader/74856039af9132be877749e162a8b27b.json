{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giuliana/Desktop/Curso React/curso-react-coderhouse/src/Containers/ItemListContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Item from '../Components/Item/Item';\nimport { getFirestore } from './../firebase/index';\n\nconst ItemListContainer = () => {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const {\n    categoryId\n  } = useParams();\n  useEffect(() => {\n    const db = getFirestore();\n    let docRef;\n\n    if (categoryId) {\n      console.log(categoryId, \"category idddddd\");\n      docRef = db.collection(\"products\").where(\"categoryId\", \"==\", categoryId);\n    } else {\n      docRef = db.collection(\"products\");\n    }\n\n    docRef.get().then(querySnapshot => {\n      if (querySnapshot.size === 0) {\n        console.log(\"Sin resultados\");\n      }\n\n      setProducts(querySnapshot.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      })));\n    });\n  }, [categoryId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: products.map(product => /*#__PURE__*/_jsxDEV(Item, {\n      item: product\n    }, product.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 29\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ItemListContainer, \"F0I4S/iwa09R0Qln4AqguXScoG8=\", false, function () {\n  return [useParams];\n});\n\n_c = ItemListContainer;\nexport default ItemListContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemListContainer\");","map":{"version":3,"sources":["/Users/giuliana/Desktop/Curso React/curso-react-coderhouse/src/Containers/ItemListContainer.js"],"names":["React","useState","useEffect","useParams","Item","getFirestore","ItemListContainer","products","setProducts","categoryId","db","docRef","console","log","collection","where","get","then","querySnapshot","size","docs","map","doc","data","id","product"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,SAASC,YAAT,QAA6B,qBAA7B;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAeN,SAAS,EAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,EAAE,GAAGL,YAAY,EAAvB;AACA,QAAIM,MAAJ;;AAEA,QAAGF,UAAH,EAAc;AACVG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ,EAAwB,kBAAxB;AACAE,MAAAA,MAAM,GAAGD,EAAE,CAACI,UAAH,CAAc,UAAd,EAA0BC,KAA1B,CAAgC,YAAhC,EAA8C,IAA9C,EAAoDN,UAApD,CAAT;AACH,KAHD,MAGK;AACDE,MAAAA,MAAM,GAACD,EAAE,CAACI,UAAH,CAAc,UAAd,CAAP;AACH;;AAEDH,IAAAA,MAAM,CAACK,GAAP,GAAaC,IAAb,CAAmBC,aAAD,IAAmB;AACjC,UAAIA,aAAa,CAACC,IAAd,KAAuB,CAA3B,EAA6B;AACzBP,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH;;AACDL,MAAAA,WAAW,CAACU,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuBC,GAAG,KAAK,EAAC,GAAGA,GAAG,CAACC,IAAJ,EAAJ;AAAgBC,QAAAA,EAAE,EAAEF,GAAG,CAACE;AAAxB,OAAL,CAA1B,CAAD,CAAX;AACH,KALD;AAMH,GAjBQ,EAiBN,CAACf,UAAD,CAjBM,CAAT;AAmBA,sBACQ;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACaF,QAAQ,CAACc,GAAT,CAAcI,OAAD,iBACV,QAAC,IAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAYA,OAAO,CAACD,EAApB;AAAA;AAAA;AAAA;AAAA,YADH;AADb;AAAA;AAAA;AAAA;AAAA,UADR;AASH,CAhCD;;GAAMlB,iB;UAEmBH,S;;;KAFnBG,iB;AAiCN,eAAeA,iBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Item from '../Components/Item/Item'\nimport { getFirestore } from './../firebase/index'\n\nconst ItemListContainer = () => {\n    const [products, setProducts] = useState([]);\n    const {categoryId} = useParams(); \n\n    useEffect(() => {\n        const db = getFirestore();\n        let docRef;\n\n        if(categoryId){\n            console.log(categoryId, \"category idddddd\");\n            docRef = db.collection(\"products\").where(\"categoryId\", \"==\", categoryId);\n        }else{\n            docRef=db.collection(\"products\");\n        }\n\n        docRef.get().then((querySnapshot) => {\n            if (querySnapshot.size === 0){\n                console.log(\"Sin resultados\");\n            }\n            setProducts(querySnapshot.docs.map(doc => ({...doc.data(), id: doc.id }))); \n        });\n    }, [categoryId]) \n    \n    return (\n            <div className=\"row\">\n                        {products.map((product) => (\n                            <Item key= {product.id} item={product}\n                            />\n                         )\n                        )}\n            </div>\n    );\n};     \nexport default ItemListContainer;"]},"metadata":{},"sourceType":"module"}